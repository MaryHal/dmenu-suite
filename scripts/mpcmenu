#!/bin/bash

MENU_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
source $MENU_DIR/lib/menu_helpers.sh

MUSIC_DIR="/home/sanford/docs/music"
CACHE_FILE="/tmp/mpcmenu_cache"

tempOut=$(mpc --format "")

# playState=$(echo "${tempOut}" | sed -n 2p | awk '{ print $1; }')

stateLine=$(echo "${tempOut}" | sed 's/volume://')
randomState=$(awk '/repeat:/{ print $5; }' <<< "${stateLine}")
repeatState=$(awk '/repeat:/{ print $3; }' <<< "${stateLine}")
singleState=$(awk '/repeat:/{ print $7; }' <<< "${stateLine}")
consumeState=$(awk '/repeat:/{ print $9; }' <<< "${stateLine}")

# Menu Items
mainMenu="[View]
[AddDir]
[AddSingle]
[Clear]
[Select]
[Current]
[Play]
[Stop]
[Pause]
[Load]
[Playlist]
[Previous]
[Next]
[Seek]
[Replay]
[Random: ${randomState}]
[Repeat: ${repeatState}]
[Single: ${singleState}]
[Consume: ${consumeState}]
[Lyrics]
[Update]"

playlistOptions=" [Add]
[AddAll]
[Remove]
[Clear]
[Save]
[Load]
[Delete]"

seekOptions="0%
10%
20%
30%
40%
50%
60%
70%
80%
90%"

action=$(menu "Option: " "$mainMenu")
case "$action" in
    '[View]')
        candidates=$(mpc playlist --format '%position%  [%album% - ][%artist% - ]%title%')
        selection=$(menu "Song: " "$candidates")
        ;;
    '[AddDir]')
        pushd ${MUSIC_DIR} > /dev/null
        musicDirList=$(find . -type d | sed -e 's!^\./!!')
        popd > /dev/null
        query=$(menu "Add: " "${musicDirList}")

        if [[ -n "$query" ]]; then
            mpc ls "$query" | mpc add -q
        fi
        ;;
    '[AddSingle]')
        # if [[ ! -a "${CACHE_FILE}" || "${CACHE_FILE}" -ot "${MUSIC_DIR}" ]]; then
        #     notify-send "MPD:" "Building Cache"
        #     musicList=$(mpc listall | tee "${CACHE_FILE}")
        # else
        #     notify-send "MPD:" "Using Cache"
        #     musicList=$(<${CACHE_FILE})
        # fi

        musicList=$(mpc listall)
        query=$(menu "Add: " "${musicList}")
        if [[ -n "$query" ]]; then
            mpc add "$query" -q
        fi
        ;;
    '[Clear]')
        mpc clear -q
        notify-send "MPD:" "Playlist Cleared"
        ;;
    '[Select]')
        candidates=$(mpc playlist --format '%position%  [%album% - ][%artist% - ]%title%')
        selection=$(menu "Song: " "$candidates")

        if [[ -n "$selection" ]]; then
            songNum=$(awk '{print $1}' <<< "$selection")
            mpc -q play "$songNum"
        fi
        ;;
    '[Current]')
        songInfo=$(mpc -f 'Title:  [%title%]\nArtist: [%artist%]\nAlbum:  [%album%]\n ')
        notify-send "MPD:" "$songInfo"
        ;;
    '[Play]')
        mpc toggle -q
        ;;
    '[Stop]')
        mpc stop -q
        ;;
    '[Pause]')
        mpc toggle -q
        ;;
    '[Load]')
        choice=$(menu "Load: " "$(mpc lsplaylists)")
        if [[ -n "$choice" ]]; then
            mpc stop -q
            mpc clear -q
            mpc -q load "$choice"
            notify-send "MPD:" "Playlist \"$choice\" Loaded"
        fi
        ;;
    '[Playlist]')
        action=$(menu "Option: " "$playlistOptions")
        case "$action" in
            '[Add]')
                query=$(menu "Add: " "")
                if [[ -n "$query" ]]; then
                    mpc findadd $query -q
                fi
                ;;
            '[AddAll]')
                mpc update -q
                mpc ls | mpc add -q
                ;;
            # '[Remove]')
            #     selection=$(mpc playlist --format '%position%  %title%' | $MenuCmd | awk '{print $1}')
            #     while [ $selection ] ; do
            #         mpc del $selection
            #         selection=$(mpc playlist --format '%position%  %title%' | $MenuCmd | awk '{print $1}')
            #     done
            # ;;
            '[Clear]')
                mpc clear -q
                notify-send "MPD:" "Playlist Cleared"
                ;;
            '[Load]')
                choice=$(menu "Load: " "$(mpc lsplaylists)")
                if [[ -n "$choice" ]]; then
                    mpc stop -q
                    mpc clear -q
                    mpc -q load "$choice"
                    notify-send "MPD:" "Playlist \"$choice\" Loaded"
                fi
                ;;
            '[Save]')
                name=$(menu "Load: " "$(mpc lsplaylists)")
                if [[ -n "$name" ]]; then
                    mpc save "$name"
                    notify-send "MPD:" "Playlist \"$name\" Saved"
                fi
                ;;
            '[Delete]')
                name=$(menu "Load: " "$(mpc lsplaylists)")
                if [[ -n "$name" ]]; then
                    mpc rm "$name"
                    notify-send "MPD:" "Playlist \"$name\" Deleted"
                fi
                ;;
        esac
        ;;
    '[Previous]')
        mpc prev -q
        ;;
    '[Next]')
        mpc next -q
        ;;
    '[Seek]')
        seek=$(menu "Seek: " "$seekOptions")
        if [[ -n "$seek" ]]; then
            mpc seek "$seek"
        fi
        ;;
    '[Replay]')
        mpc stop -q
        mpc play -q
        ;;
    '[Random'*)
        mpc random -q
        ;;
    '[Repeat'*)
        mpc repeat -q
        ;;
    '[Single'*)
        mpc single -q
        ;;
    '[Consume'*)
        mpc consume -q
        ;;
    '[Lyrics]')
        song=$(mpc current)
        file="$HOME/.lyrics/$song.txt"

        if [[ -e "$file" ]]; then
            $TERMINAL -e sh -c "less \"$file\"" & disown
        else
            notify-send "MPD:" "Lyrics for \"$song\" not found"
        fi
        ;;
    '[Update]')
        notify-send "MPD Database" "Updating"
        mpc update -q
        ;;
esac
